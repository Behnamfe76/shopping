<?php

namespace Fereydooni\Shopping\app\DTOs;

use Spatie\LaravelData\Data;
use Fereydooni\Shopping\app\Models\Product;
use Illuminate\Support\Carbon;

class ProductDTO extends Data
{
    public function __construct(
        public int $category_id,
        public ?int $brand_id,
        public string $sku,
        public string $title,
        public string $slug,
        public ?string $description,
        public ?float $weight,
        public ?string $dimensions,
        public string $status,
        public string $product_type,
        public float $price,
        public ?float $sale_price,
        public ?float $cost_price,
        public int $stock_quantity,
        public int $min_stock_level,
        public ?int $max_stock_level,
        public bool $is_featured,
        public bool $is_active,
        public int $sort_order,
        public ?string $meta_title,
        public ?string $meta_description,
        public ?string $meta_keywords,
        public ?string $seo_url,
        public ?string $canonical_url,
        public ?string $og_image,
        public ?string $twitter_image,
        public ?string $video_url,
        public ?string $warranty_info,
        public ?string $shipping_info,
        public ?string $return_policy,
        public ?string $tags,
        public ?string $attributes,
        public int $variants_count,
        public int $reviews_count,
        public float $average_rating,
        public int $total_sales,
        public int $view_count,
        public int $wishlist_count,
        public ?Carbon $created_at = null,
        public ?Carbon $updated_at = null,
        public ?int $id = null,
    ) {
    }

    public static function fromModel(Product $product): self
    {
        return new self(
            category_id: $product->category_id,
            brand_id: $product->brand_id,
            sku: $product->sku,
            title: $product->title,
            slug: $product->slug,
            description: $product->description,
            weight: $product->weight,
            dimensions: $product->dimensions,
            status: $product->status->value,
            product_type: $product->product_type->value,
            price: $product->price ?? 0.0,
            sale_price: $product->sale_price,
            cost_price: $product->cost_price,
            stock_quantity: $product->stock_quantity ?? 0,
            min_stock_level: $product->min_stock_level ?? 0,
            max_stock_level: $product->max_stock_level,
            is_featured: $product->is_featured ?? false,
            is_active: $product->is_active ?? true,
            sort_order: $product->sort_order ?? 0,
            meta_title: $product->meta_title,
            meta_description: $product->meta_description,
            meta_keywords: $product->meta_keywords,
            seo_url: $product->seo_url,
            canonical_url: $product->canonical_url,
            og_image: $product->og_image,
            twitter_image: $product->twitter_image,
            video_url: $product->video_url,
            warranty_info: $product->warranty_info,
            shipping_info: $product->shipping_info,
            return_policy: $product->return_policy,
            tags: $product->tags,
            attributes: $product->attributes,
            variants_count: $product->variants_count ?? 0,
            reviews_count: $product->reviews_count ?? 0,
            average_rating: $product->average_rating ?? 0.0,
            total_sales: $product->total_sales ?? 0,
            view_count: $product->view_count ?? 0,
            wishlist_count: $product->wishlist_count ?? 0,
            created_at: $product->created_at,
            updated_at: $product->updated_at,
            id: $product->id,
        );
    }

    public static function rules(): array
    {
        return [
            'category_id' => ['required', 'integer', 'exists:categories,id'],
            'brand_id' => ['nullable', 'integer', 'exists:brands,id'],
            'sku' => ['required', 'string', 'max:100', 'unique:products,sku'],
            'title' => ['required', 'string', 'max:255'],
            'slug' => ['required', 'string', 'max:255', 'unique:products,slug'],
            'description' => ['nullable', 'string'],
            'weight' => ['nullable', 'numeric', 'min:0', 'decimal:0,10'],
            'dimensions' => ['nullable', 'string', 'max:255'],
            'status' => ['required', 'string', 'in:draft,published,archived'],
            'product_type' => ['required', 'string', 'in:physical,digital,subscription'],
            'price' => ['required', 'numeric', 'min:0', 'decimal:0,10'],
            'sale_price' => ['nullable', 'numeric', 'min:0', 'decimal:0,10'],
            'cost_price' => ['nullable', 'numeric', 'min:0', 'decimal:0,10'],
            'stock_quantity' => ['required', 'integer', 'min:0'],
            'min_stock_level' => ['required', 'integer', 'min:0'],
            'max_stock_level' => ['nullable', 'integer', 'min:0'],
            'is_featured' => ['required', 'boolean'],
            'is_active' => ['required', 'boolean'],
            'sort_order' => ['required', 'integer', 'min:0'],
            'meta_title' => ['nullable', 'string', 'max:60'],
            'meta_description' => ['nullable', 'string', 'max:160'],
            'meta_keywords' => ['nullable', 'string'],
            'seo_url' => ['nullable', 'string', 'max:255'],
            'canonical_url' => ['nullable', 'string', 'max:255', 'url'],
            'og_image' => ['nullable', 'string', 'max:255', 'url'],
            'twitter_image' => ['nullable', 'string', 'max:255', 'url'],
            'video_url' => ['nullable', 'string', 'max:255', 'url'],
            'warranty_info' => ['nullable', 'string'],
            'shipping_info' => ['nullable', 'string'],
            'return_policy' => ['nullable', 'string'],
            'tags' => ['nullable', 'string'],
            'attributes' => ['nullable', 'string'],
        ];
    }

    public static function messages(): array
    {
        return [
            'category_id.required' => 'Category is required.',
            'category_id.exists' => 'Selected category does not exist.',
            'brand_id.exists' => 'Selected brand does not exist.',
            'sku.required' => 'SKU is required.',
            'sku.unique' => 'SKU must be unique.',
            'title.required' => 'Title is required.',
            'slug.required' => 'Slug is required.',
            'slug.unique' => 'Slug must be unique.',
            'status.required' => 'Status is required.',
            'status.in' => 'Status must be draft, published, or archived.',
            'product_type.required' => 'Product type is required.',
            'product_type.in' => 'Product type must be physical, digital, or subscription.',
            'price.required' => 'Price is required.',
            'price.min' => 'Price must be greater than or equal to 0.',
            'stock_quantity.required' => 'Stock quantity is required.',
            'stock_quantity.min' => 'Stock quantity must be greater than or equal to 0.',
            'min_stock_level.required' => 'Minimum stock level is required.',
            'min_stock_level.min' => 'Minimum stock level must be greater than or equal to 0.',
            'is_featured.required' => 'Featured status is required.',
            'is_active.required' => 'Active status is required.',
            'sort_order.required' => 'Sort order is required.',
            'sort_order.min' => 'Sort order must be greater than or equal to 0.',
        ];
    }

    public function toArray(): array
    {
        return [
            'id' => $this->id,
            'category_id' => $this->category_id,
            'brand_id' => $this->brand_id,
            'sku' => $this->sku,
            'title' => $this->title,
            'slug' => $this->slug,
            'description' => $this->description,
            'weight' => $this->weight,
            'dimensions' => $this->dimensions,
            'status' => $this->status,
            'product_type' => $this->product_type,
            'price' => $this->price,
            'sale_price' => $this->sale_price,
            'cost_price' => $this->cost_price,
            'stock_quantity' => $this->stock_quantity,
            'min_stock_level' => $this->min_stock_level,
            'max_stock_level' => $this->max_stock_level,
            'is_featured' => $this->is_featured,
            'is_active' => $this->is_active,
            'sort_order' => $this->sort_order,
            'meta_title' => $this->meta_title,
            'meta_description' => $this->meta_description,
            'meta_keywords' => $this->meta_keywords,
            'seo_url' => $this->seo_url,
            'canonical_url' => $this->canonical_url,
            'og_image' => $this->og_image,
            'twitter_image' => $this->twitter_image,
            'video_url' => $this->video_url,
            'warranty_info' => $this->warranty_info,
            'shipping_info' => $this->shipping_info,
            'return_policy' => $this->return_policy,
            'tags' => $this->tags,
            'attributes' => $this->attributes,
            'variants_count' => $this->variants_count,
            'reviews_count' => $this->reviews_count,
            'average_rating' => $this->average_rating,
            'total_sales' => $this->total_sales,
            'view_count' => $this->view_count,
            'wishlist_count' => $this->wishlist_count,
            'created_at' => $this->created_at?->toISOString(),
            'updated_at' => $this->updated_at?->toISOString(),
        ];
    }
}
