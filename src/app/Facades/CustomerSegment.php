<?php

namespace App\Facades;

use App\DTOs\CustomerSegmentDTO;
use App\Models\CustomerSegment;
use App\Services\CustomerSegmentService;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\Facade;

/**
 * @method static CustomerSegmentDTO createSegment(array $data)
 * @method static ?CustomerSegmentDTO updateSegment(CustomerSegment $segment, array $data)
 * @method static bool deleteSegment(CustomerSegment $segment)
 * @method static bool activateSegment(CustomerSegment $segment)
 * @method static bool deactivateSegment(CustomerSegment $segment)
 * @method static int calculateSegmentCustomers(CustomerSegment $segment)
 * @method static bool recalculateAllSegments()
 * @method static bool addCustomerToSegment(CustomerSegment $segment, int $customerId)
 * @method static bool removeCustomerFromSegment(CustomerSegment $segment, int $customerId)
 * @method static bool updateSegmentCriteria(CustomerSegment $segment, array $criteria)
 * @method static bool updateSegmentConditions(CustomerSegment $segment, array $conditions)
 * @method static array getSegmentAnalytics(int $segmentId)
 * @method static array compareSegments(int $segmentId1, int $segmentId2)
 * @method static array getSegmentForecast(int $segmentId)
 * @method static array exportSegment(CustomerSegment $segment)
 * @method static CustomerSegment importSegment(array $data)
 * @method static CustomerSegment duplicateSegment(CustomerSegment $segment, string $newName)
 * @method static CustomerSegment mergeSegments(array $segmentIds, string $newName)
 * @method static array splitSegment(CustomerSegment $segment, array $criteria)
 * @method static array getSegmentRecommendations()
 * @method static array getSegmentInsights()
 * @method static array getSegmentTrendsForecast(string $period = 'monthly')
 * @method static Collection getSegmentsNeedingRecalculation()
 * @method static Collection getOverlappingSegments(CustomerSegment $segment)
 * @method static array getSegmentStatistics()
 * @method static Collection all()
 * @method static LengthAwarePaginator paginate(int $perPage = 15)
 * @method static ?CustomerSegment find(int $id)
 * @method static ?CustomerSegmentDTO findDTO(int $id)
 * @method static ?CustomerSegment findByName(string $name)
 * @method static ?CustomerSegmentDTO findByNameDTO(string $name)
 * @method static Collection findByType(string $type)
 * @method static Collection findByTypeDTO(string $type)
 * @method static Collection findByStatus(string $status)
 * @method static Collection findByStatusDTO(string $status)
 * @method static Collection findByPriority(string $priority)
 * @method static Collection findByPriorityDTO(string $priority)
 * @method static Collection findAutomatic()
 * @method static Collection findAutomaticDTO()
 * @method static Collection findManual()
 * @method static Collection findManualDTO()
 * @method static Collection findDynamic()
 * @method static Collection findDynamicDTO()
 * @method static Collection findStatic()
 * @method static Collection findStaticDTO()
 * @method static Collection findByCustomerCount(int $minCount, int $maxCount)
 * @method static Collection findByCustomerCountDTO(int $minCount, int $maxCount)
 * @method static Collection findByLastCalculatedDate(string $startDate, string $endDate)
 * @method static Collection findByLastCalculatedDateDTO(string $startDate, string $endDate)
 * @method static CustomerSegment create(array $data)
 * @method static CustomerSegmentDTO createAndReturnDTO(array $data)
 * @method static bool update(CustomerSegment $segment, array $data)
 * @method static ?CustomerSegmentDTO updateAndReturnDTO(CustomerSegment $segment, array $data)
 * @method static bool delete(CustomerSegment $segment)
 * @method static bool activate(CustomerSegment $segment)
 * @method static bool deactivate(CustomerSegment $segment)
 * @method static bool makeAutomatic(CustomerSegment $segment)
 * @method static bool makeManual(CustomerSegment $segment)
 * @method static bool makeDynamic(CustomerSegment $segment)
 * @method static bool makeStatic(CustomerSegment $segment)
 * @method static bool setPriority(CustomerSegment $segment, string $priority)
 * @method static int calculateCustomers(CustomerSegment $segment)
 * @method static bool recalculateAllSegments()
 * @method static bool addCustomer(CustomerSegment $segment, int $customerId)
 * @method static bool removeCustomer(CustomerSegment $segment, int $customerId)
 * @method static bool updateCriteria(CustomerSegment $segment, array $criteria)
 * @method static bool updateConditions(CustomerSegment $segment, array $conditions)
 * @method static bool validateCriteria(array $criteria)
 * @method static bool validateConditions(array $conditions)
 * @method static int getSegmentCount()
 * @method static int getSegmentCountByType(string $type)
 * @method static int getSegmentCountByStatus(string $status)
 * @method static int getSegmentCountByPriority(string $priority)
 * @method static int getAutomaticSegmentCount()
 * @method static int getManualSegmentCount()
 * @method static int getDynamicSegmentCount()
 * @method static int getStaticSegmentCount()
 * @method static int getTotalCustomerCount()
 * @method static float getAverageCustomerCount()
 * @method static Collection search(string $query)
 * @method static Collection searchDTO(string $query)
 * @method static Collection searchByCriteria(array $criteria)
 * @method static Collection searchByCriteriaDTO(array $criteria)
 * @method static Collection getRecentSegments(int $limit = 10)
 * @method static Collection getRecentSegmentsDTO(int $limit = 10)
 * @method static Collection getSegmentsByCustomerCount(int $minCount, int $maxCount)
 * @method static Collection getSegmentsByCustomerCountDTO(int $minCount, int $maxCount)
 * @method static Collection getSegmentsByLastCalculated(int $daysAgo)
 * @method static Collection getSegmentsByLastCalculatedDTO(int $daysAgo)
 * @method static Collection getSegmentsNeedingRecalculation()
 * @method static Collection getSegmentsNeedingRecalculationDTO()
 * @method static Collection getOverlappingSegments(CustomerSegment $segment)
 * @method static Collection getOverlappingSegmentsDTO(CustomerSegment $segment)
 * @method static array getSegmentStats()
 * @method static array getSegmentStatsByType()
 * @method static array getSegmentStatsByStatus()
 * @method static array getSegmentStatsByPriority()
 * @method static array getSegmentGrowthStats(string $period = 'monthly')
 * @method static array getSegmentPerformanceStats()
 * @method static array getSegmentPerformanceStatsByType(string $type)
 * @method static array getSegmentInsights()
 * @method static array getSegmentInsightsByType(string $type)
 * @method static array getSegmentTrends(string $period = 'monthly')
 * @method static array getSegmentComparison(int $segmentId1, int $segmentId2)
 * @method static array getSegmentForecast(int $segmentId)
 * @method static array exportSegment(CustomerSegment $segment)
 * @method static CustomerSegment importSegment(array $data)
 * @method static CustomerSegment duplicateSegment(CustomerSegment $segment, string $newName)
 * @method static CustomerSegment mergeSegments(array $segmentIds, string $newName)
 * @method static array splitSegment(CustomerSegment $segment, array $criteria)
 * @method static array generateRecommendations()
 * @method static array calculateInsights()
 * @method static array forecastTrends(string $period = 'monthly')
 *
 * @see \App\Services\CustomerSegmentService
 */
class CustomerSegment extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return CustomerSegmentService::class;
    }
}
