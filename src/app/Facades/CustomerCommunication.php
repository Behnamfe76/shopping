<?php

namespace Fereydooni\Shopping\app\Facades;

use Illuminate\Support\Facades\Facade;
use Fereydooni\Shopping\app\Services\CustomerCommunicationService;
use Fereydooni\Shopping\app\DTOs\CustomerCommunicationDTO;
use Fereydooni\Shopping\app\Models\CustomerCommunication;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Pagination\Paginator;
use Illuminate\Pagination\CursorPaginator;

/**
 * @method static Collection all()
 * @method static LengthAwarePaginator paginate(int $perPage = 15)
 * @method static Paginator simplePaginate(int $perPage = 15)
 * @method static CursorPaginator cursorPaginate(int $perPage = 15, string $cursor = null)
 * @method static CustomerCommunication|null find(int $id)
 * @method static CustomerCommunicationDTO|null findDTO(int $id)
 * @method static CustomerCommunicationDTO createCommunication(array $data)
 * @method static CustomerCommunicationDTO|null updateCommunication(int $id, array $data)
 * @method static bool delete(int $id)
 * @method static Collection findByCustomerId(int $customerId)
 * @method static Collection findByCustomerIdDTO(int $customerId)
 * @method static Collection findByUserId(int $userId)
 * @method static Collection findByUserIdDTO(int $userId)
 * @method static Collection findByCampaignId(int $campaignId)
 * @method static Collection findByCampaignIdDTO(int $campaignId)
 * @method static Collection findBySegmentId(int $segmentId)
 * @method static Collection findBySegmentIdDTO(int $segmentId)
 * @method static Collection findByTemplateId(int $templateId)
 * @method static Collection findByTemplateIdDTO(int $templateId)
 * @method static Collection findByType(string $type)
 * @method static Collection findByTypeDTO(string $type)
 * @method static Collection findByStatus(string $status)
 * @method static Collection findByStatusDTO(string $status)
 * @method static Collection findByPriority(string $priority)
 * @method static Collection findByPriorityDTO(string $priority)
 * @method static Collection findByChannel(string $channel)
 * @method static Collection findByChannelDTO(string $channel)
 * @method static Collection findScheduled()
 * @method static Collection findScheduledDTO()
 * @method static Collection findSent()
 * @method static Collection findSentDTO()
 * @method static Collection findDelivered()
 * @method static Collection findDeliveredDTO()
 * @method static Collection findOpened()
 * @method static Collection findOpenedDTO()
 * @method static Collection findClicked()
 * @method static Collection findClickedDTO()
 * @method static Collection findBounced()
 * @method static Collection findBouncedDTO()
 * @method static Collection findUnsubscribed()
 * @method static Collection findUnsubscribedDTO()
 * @method static Collection findByDateRange(string $startDate, string $endDate)
 * @method static Collection findByDateRangeDTO(string $startDate, string $endDate)
 * @method static Collection findByScheduledDateRange(string $startDate, string $endDate)
 * @method static Collection findByScheduledDateRangeDTO(string $startDate, string $endDate)
 * @method static bool schedule(CustomerCommunication $communication, string $scheduledAt)
 * @method static bool send(CustomerCommunication $communication)
 * @method static bool markAsDelivered(CustomerCommunication $communication)
 * @method static bool markAsOpened(CustomerCommunication $communication)
 * @method static bool markAsClicked(CustomerCommunication $communication)
 * @method static bool markAsBounced(CustomerCommunication $communication)
 * @method static bool markAsUnsubscribed(CustomerCommunication $communication)
 * @method static bool cancel(CustomerCommunication $communication)
 * @method static bool reschedule(CustomerCommunication $communication, string $newScheduledAt)
 * @method static int getCommunicationCount()
 * @method static int getCommunicationCountByCustomer(int $customerId)
 * @method static int getCommunicationCountByType(string $type)
 * @method static int getCommunicationCountByStatus(string $status)
 * @method static int getCommunicationCountByChannel(string $channel)
 * @method static int getCommunicationCountByCampaign(int $campaignId)
 * @method static int getCommunicationCountBySegment(int $segmentId)
 * @method static int getScheduledCount()
 * @method static int getSentCount()
 * @method static int getDeliveredCount()
 * @method static int getOpenedCount()
 * @method static int getClickedCount()
 * @method static int getBouncedCount()
 * @method static int getUnsubscribedCount()
 * @method static float getDeliveryRate()
 * @method static float getDeliveryRateByCampaign(int $campaignId)
 * @method static float getDeliveryRateBySegment(int $segmentId)
 * @method static float getOpenRate()
 * @method static float getOpenRateByCampaign(int $campaignId)
 * @method static float getOpenRateBySegment(int $segmentId)
 * @method static float getClickRate()
 * @method static float getClickRateByCampaign(int $campaignId)
 * @method static float getClickRateBySegment(int $segmentId)
 * @method static float getBounceRate()
 * @method static float getBounceRateByCampaign(int $campaignId)
 * @method static float getBounceRateBySegment(int $segmentId)
 * @method static float getUnsubscribeRate()
 * @method static float getUnsubscribeRateByCampaign(int $campaignId)
 * @method static float getUnsubscribeRateBySegment(int $segmentId)
 * @method static Collection search(string $query)
 * @method static Collection searchDTO(string $query)
 * @method static Collection searchByCustomer(int $customerId, string $query)
 * @method static Collection searchByCustomerDTO(int $customerId, string $query)
 * @method static Collection searchByCampaign(int $campaignId, string $query)
 * @method static Collection searchByCampaignDTO(int $campaignId, string $query)
 * @method static Collection getRecentCommunications(int $limit = 10)
 * @method static Collection getRecentCommunicationsDTO(int $limit = 10)
 * @method static Collection getRecentCommunicationsByCustomer(int $customerId, int $limit = 10)
 * @method static Collection getRecentCommunicationsByCustomerDTO(int $customerId, int $limit = 10)
 * @method static Collection getCommunicationsByType(int $customerId, string $type, int $limit = 10)
 * @method static Collection getCommunicationsByTypeDTO(int $customerId, string $type, int $limit = 10)
 * @method static Collection getCommunicationsByStatus(int $customerId, string $status, int $limit = 10)
 * @method static Collection getCommunicationsByStatusDTO(int $customerId, string $status, int $limit = 10)
 * @method static Collection getCommunicationsByChannel(int $customerId, string $channel, int $limit = 10)
 * @method static Collection getCommunicationsByChannelDTO(int $customerId, string $channel, int $limit = 10)
 * @method static Collection getScheduledCommunications(int $customerId)
 * @method static Collection getScheduledCommunicationsDTO(int $customerId)
 * @method static Collection getUpcomingCommunications(int $customerId, int $daysAhead = 7)
 * @method static Collection getUpcomingCommunicationsDTO(int $customerId, int $daysAhead = 7)
 * @method static bool validateCommunication(array $data)
 * @method static array getCommunicationStats()
 * @method static array getCommunicationStatsByCustomer(int $customerId)
 * @method static array getCommunicationStatsByType()
 * @method static array getCommunicationStatsByStatus()
 * @method static array getCommunicationStatsByChannel()
 * @method static array getCommunicationStatsByCampaign(int $campaignId)
 * @method static array getCommunicationStatsBySegment(int $segmentId)
 * @method static array getCommunicationGrowthStats(string $period = 'monthly')
 * @method static array getCommunicationGrowthStatsByCustomer(int $customerId, string $period = 'monthly')
 * @method static array getCommunicationPerformanceStats()
 * @method static array getCommunicationPerformanceStatsByCampaign(int $campaignId)
 * @method static array getCommunicationPerformanceStatsBySegment(int $segmentId)
 * @method static array getCommunicationEngagementStats()
 * @method static array getCommunicationEngagementStatsByCustomer(int $customerId)
 * @method static Collection getCustomerCommunicationHistory(int $customerId)
 * @method static Collection getCustomerCommunicationHistoryDTO(int $customerId)
 * @method static array getCustomerCommunicationSummary(int $customerId)
 * @method static array getCustomerCommunicationSummaryDTO(int $customerId)
 * @method static array exportCustomerCommunications(int $customerId)
 * @method static bool importCustomerCommunications(int $customerId, array $communications)
 * @method static array getCommunicationAnalytics(int $customerId)
 * @method static array getCommunicationAnalyticsByType(string $type)
 * @method static array getCommunicationAnalyticsByDateRange(string $startDate, string $endDate)
 * @method static array getCommunicationRecommendations(int $customerId)
 * @method static array getCommunicationInsights(int $customerId)
 * @method static array getCommunicationTrends(int $customerId, string $period = 'monthly')
 * @method static array getCommunicationComparison(int $customerId1, int $customerId2)
 * @method static array getCommunicationForecast(int $customerId)
 * @method static bool addAttachment(CustomerCommunication $communication, $file)
 * @method static bool removeAttachment(CustomerCommunication $communication, int $mediaId)
 * @method static Collection getAttachments(CustomerCommunication $communication)
 * @method static bool updateTrackingData(CustomerCommunication $communication, array $trackingData)
 * @method static array getTrackingData(CustomerCommunication $communication)
 */
class CustomerCommunication extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return CustomerCommunicationService::class;
    }
}
